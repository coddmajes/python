#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#fork()
import os

print('Process (%s) start...' % os.getpid())
# Only works on Unix/Linux/Mac:
pid = os.fork()
if pid == 0:
    print('I am child process (%s) and my parent is %s.' % (os.getpid(), os.getppid()))
else:
    print('I (%s) just created a child process (%s).' % (os.getpid(), pid))

'''
Process (876) start...
I (876) just created a child process (877).
I am child process (877) and my parent is 876.
'''

#multiprocessing
#创建一个Process实例，用start()方法启动,join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步


#pool 进程池批量创建子进程

from multiprocessing import Process
import os

# 子进程要执行的代码
def run_proc(name):
    print('Run child process %s (%s)...' % (name, os.getpid()))

if __name__=='__main__':
    print('Parent process %s.' % os.getpid())
    p = Process(target=run_proc, args=('test',))
    print('Child process will start.')
    p.start()
    p.join()
    print('Child process end.')
    
    
'''
Parent process 928.
Process will start.
Run child process test (929)...
Process end
'''

from multiprocessing import Pool
import os, time, random
def long_time_task(name):
	print('Run task %s (%s)...'%(name,os.getpid()))
	start=time.time()
	time.sleep(random.random()*3)
	end=time.time()
	print('Task %s runs %0.2f seconds.' %(name,(end-start)))

if __name__=='__main__':
	print('Parent process %s.' % os.getpid())
	p=Pool(4)
	for i in range(5):
		p.apply_async(long_time_task,args=(i,))
	print('Waiting for all subprocesses done...')
	p.close()#调用close()之后就不能继续添加新的Process
	p.join()
	print('All subprocesses done.')
	
'''
Parent process 9688.
Waiting for all subprocesses done...
Run task 0 (2524)...
Run task 1 (6888)...
Run task 2 (9284)...
Run task 3 (6640)...
Task 0 runs 0.60 seconds.
Run task 4 (2524)...
Task 3 runs 1.38 seconds.
Task 4 runs 1.14 seconds.
Task 1 runs 1.82 seconds.
Task 2 runs 2.87 seconds.
All subprocesses done.
'''


#subprocess模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出
import subprocess

r = subprocess.call(['nslookup', 'www.python.org'])

'''
服务器:  dnscache1.tongji.edu.cn
Address:  202.120.190.208

非权威应答:
名称:    python.map.fastly.net
Address:  23.235.47.223
Aliases:  www.python.org
'''

#子进程还需要输入，则可以通过communicate()方法输入
import subprocess

p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

'''
>>> 默认服务器:  dnscache1.tongji.edu.cn
Address:  202.120.190.208
'''
> output,err=p.communicate(b'set q=mx\npython.org\nexit\n')
'''
> 服务器:  dnscache1.tongji.edu.cn
Address:  202.120.190.208

DNS request timed out.
    timeout was 2 seconds.
python.org      MX preference = 50, mail exchanger = mail.python.org

python.org      nameserver = ns2.p11.dynect.net
python.org      nameserver = ns1.p11.dynect.net
python.org      nameserver = ns3.p11.dynect.net
python.org      nameserver = ns4.p11.dynect.net
mail.python.org internet address = 188.166.95.178
'''

#Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据
from multiprocessing import Process, Queue
import os, time, random

# 写数据进程执行的代码:
def write(q):
    print('Process to write: %s' % os.getpid())
    for value in ['A', 'B', 'C']:
        print('Put %s to queue...' % value)
        q.put(value)
        time.sleep(random.random())

# 读数据进程执行的代码:
def read(q):
    print('Process to read: %s' % os.getpid())
    while True:
        value = q.get(True)
        print('Get %s from queue.' % value)

if __name__=='__main__':
    # 父进程创建Queue，并传给各个子进程：
    q = Queue()
    pw = Process(target=write, args=(q,))
    pr = Process(target=read, args=(q,))
    # 启动子进程pw，写入:
    pw.start()
    # 启动子进程pr，读取:
    pr.start()
    # 等待pw结束:
    pw.join()
    # pr进程里是死循环，无法等待其结束，只能强行终止:
    pr.terminate()
    
    '''
    Process to write: 5344
Put A to queue...
Process to read: 7788
Get A from queue.
Put B to queue...
Get B from queue.
Put C to queue...
Get C from queue.
'''
